---
import Card from "../../components/Card.astro";
import Header from "../../components/Header.astro";
import Base from "../../Layouts/Base.astro";
import { getOffres, filterByPrix } from "../../backend.mjs";

// Récupération initiale des offres
let offres = await getOffres();
console.log("offres :", offres);

let message = "";

// Gestion du filtre par prix si méthode POST
if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const minPrix = parseInt(data.get("minPrix") as string);
  const maxPrix = parseInt(data.get("maxPrix") as string);

  if (minPrix > 0 && maxPrix > 0 && maxPrix > minPrix) {
    offres = await filterByPrix(minPrix, maxPrix);
    if (offres.length === 0) {
      message = `Pas d'offres entre ${minPrix}€ et ${maxPrix}€`;
    } else {
      message = `Liste des offres entre ${minPrix}€ et ${maxPrix}€`;
    }
  } else {
    message = "Veuillez entrer des valeurs valides pour le prix.";
    offres = await getOffres();
  }
} else {
  offres = await getOffres();
}
---

<Base titre="offfres">
  <div class="bg-gray-200 py-1 mt-1">
    <div style="text-align: center; color: black;">
      <h1>Offres</h1>

      <!-- x-data avec 2 propriétés : showFavorites (pour basculer favoris/tout) et layout (pour grille/liste) -->
      <div x-data="{ showFavorites: false, layout: 'grid' }" class="p-5">
        <!-- Conteneur flex pour les boutons et le formulaire -->
        <div
          class="mb-4 flex flex-wrap items-center justify-center gap-2 sm:gap-4"
        >
          <!-- Bouton Grid -->
          <button
            @click="layout = 'grid'"
            class="px-4 py-2 bg-blue-500 text-white rounded"
          >
            Affichage Grille
          </button>

          <!-- Bouton Liste -->
          <button
            @click="layout = 'list'"
            class="px-4 py-2 bg-blue-500 text-white rounded"
          >
            Affichage Liste
          </button>

          <!-- Bouton Favoris -->
          <button
            @click="showFavorites = !showFavorites"
            class="px-4 py-2 bg-blue-500 text-white rounded"
          >
            <span x-show="!showFavorites">Afficher les favoris</span>
            <span x-show="showFavorites">Afficher tout</span>
          </button>

          <!-- Lien Ajouter une offre -->
          <a
            href="/offres/add"
            class="px-4 py-2 bg-blue-500 text-white rounded"
          >
            Ajouter une offre
          </a>

          <!-- Formulaire de filtrage par prix -->
          <form
            action="/offres"
            method="POST"
            class="flex flex-wrap items-center gap-2"
          >
            <input
              type="number"
              name="minPrix"
              placeholder="Prix minimum"
              class="border border-gray-300 rounded px-2 py-1"
            />
            <input
              type="number"
              name="maxPrix"
              placeholder="Prix maximum"
              class="border border-gray-300 rounded px-2 py-1"
            />
            <button
              type="submit"
              class="px-4 py-2 bg-blue-500 text-white rounded"
            >
              Filtrer par prix
            </button>
          </form>
        </div>

        <!-- Affichage du message de filtre (si nécessaire) -->
        {message && <p class="mb-4 text-red-600">{message}</p>}

        <!-- Affichage "tout" (non-favoris + favoris), dynamique selon 'grid' ou 'list' -->
        <div
          x-show="!showFavorites"
          :class="layout === 'grid'
            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'
            : 'flex flex-col space-y-4'"
        >
          {offres.map((offre) => <Card {...offre} />)}
        </div>

        <!-- Affichage "favoris" uniquement, dynamique selon 'grid' ou 'list' -->
        <div
          x-show="showFavorites"
          :class="layout === 'grid'
            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'
            : 'flex flex-col space-y-4'"
        >
          {offres.map((offre) => offre.favoris && <Card {...offre} />)}
        </div>
      </div>
    </div>
  </div>
</Base>
